
--- This library provides server-side capabilities for an SMTP server. Currently
--  the server will advertize the 8BITMIME, PIPELINING, and ENHANCEDSTATUSCODES
--  extensions and is capable of handling arbitrary, custom commands as well. It
--  is provided for convenience and as an example of using the ratchet
--  libraries.
module "ratchet.smtp.server"

--- Creates a new SMTP server object. A new object should be created with this
--  function for each socket created by accept()'ing a new connection on a
--  listening socket.
--  @param socket Used as the underlying socket for the session, under the
--                assumption that no I/O has taken place, except possibly
--                encryption if not using STARTTLS.
--  @param handlers Table whose keys correspond to supported SMTP commands. The
--                  command is called as a method of this table, e.g.
--                  handlers:MAIL(...), with the first argument being a reply
--                  table that the method can use to set the "code" and
--                  "message" keys to control the response. See the manual for
--                  more details.
--  @param tls If given as a ratchet.ssl context object, the STARTTLS extension
--             will be enabled allowing clients to encrypt the session. If given
--             as boolean true, it is assumed that the socket was previously
--             encrypted and the session is secure.
--  @return a new smtp.server object.
function new(socket, handlers, send_size, tls_context)

--- Sends a banner and starts listening for and responding to SMTP commands from
--  the client. This function continues until the client sends a QUIT command.
--  @param self the smtp.server object.
function handle(self)

--- An alias to the handle() method, allowing the smtp.server object to be
--  callable as if it were a function.
--  @param self the smtp.server object.
function __call(self)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
