
--- Provides a system for querying DNS for information such as A/AAAA, PTR, MX, and
--  TXT records. Specifically, this module allows creation of an object that runs
--  as a background ratchet thread handling all DNS resolution requests. If a
--  request is not immediately ready, the requesting thread will be paused and
--  reawoken when the results are in.
module "ratchet.dns"

--- Creates a new dns object and attaches itself to the given ratchet thread
--  manager. A reference to this object must be accessible anywhere requests need
--  to be made.
--  @param ratchet the ratchet object to attach to. This must be the same object
--                 that all threads using the dns object are attached to.
--  @return a new dns object.
function new(ratchet)

--- Returns the internal socket file descriptor.
--  @param self the dns object.
--  @return a file descriptor.
function get_fd(self)

--- Performs a DNS query on the given data. If the results are not immediately
--  available, the current thread will pause until they are. If a table is not
--  given for <code>type</code> or the table is tempty, the default query type(s)
--  are used. See the manual for complete details.
--  @param self the dns object.
--  @param data a string of the domain name or IP address to query against.
--  @param types optional table of strings containing the query types, e.g.
--               "ipv6" or "mx".
--  @return a table keyed on the given query types containing the query results.
--          If a query type failed, the table key will be suffixed with "_error"
--          (e.g. "ipv6_error") and will contain a string form of the error type.
--          If the entire query submission failed, no table is returned, instead
--          nil followed by an error message.
function submit(self, data, types)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
