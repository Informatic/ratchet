
--- The purpose of the ratchet library is to provide a generic socket control
--  mechanism for large numbers of sockets without using threads or losing the ease
--  of synchronous socket programming. Along with networking, the library provides
--  a sort of kernel to allow side-by-side execution of different streams of logic.
module "ratchet"

--- Constructs and returns a new ratchet object. This also creates a new libevent
--  control structure that is freed when the object is collected.
--  @param entry called initially as the entry-point ratchet thread.
--  @return a new ratchet object.
function new(entry)

--- Returns the polling method used behind-the-scenes by libevent.
--  @param self the ratchet object.
--  @return a string identifying the kernel event mechanism (kqueue, epoll, etc.).
function get_method(self)

--- Sets the new error handler for threads. The scope of the error handler depends
--  on where this method is called. Calling from the main thread will use this
--  handler as the default. Error handlers set in threads apply only to that thead.
--  Extra arguments to this function are given to the handler function. The last
--  parameter in the call will be the error object.
--  @param self the ratchet object.
--  @param func the function to call.
--  @param ... extra parameters to the function, before error object.
function set_error_handler(self, func, ...)

--- Starts the main loop. Every iteration of this loop runs all new threads, runs
--  all recently unpaused threads, runs all threads that are done waiting on
--  others, and finally starts waiting for and handling network/socket events. The
--  loop will continue until all threads created with attach() are completed.
--  @param self the ratchet object.
function loop(self)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
