
--- The purpose of the ratchet library is to provide a generic socket control
--  mechanism for large numbers of sockets without using threads or losing the ease
--  of synchronous socket programming. Along with networking, the library provides
--  a sort of kernel to allow side-by-side execution of different streams of logic.
module "ratchet"

--- Constructs and returns a new ratchet object. This also creates a new libevent
--  control structure that is freed when the object is collected.
--  @param entry called initially as the entry-point ratchet thread.
--  @return a new ratchet object.
function new(entry)

--- Returns the polling method used behind-the-scenes by libevent.
--  @param self the ratchet object.
--  @return a string identifying the kernel event mechanism (kqueue, epoll, etc.).
function get_method(self)

--- Returns the number of active threads the ratchet object is managing. This
--  includes threads that are currently running and threads that are paused, but
--  not any that have completed or errored.
--  @param self the ratchet object.
--  @return the number of active threads.
function get_num_threads(self)

--- Processes thread events in a loop. This function simply runs loop_once() with
--  blocking until it returns false.
--  @param self the ratchet object.
function loop(self)

--- Executes one iteration of event processing. This may include starting a new
--  thread or resuming one that was paused manually or by an event. This function
--  may block unless noblock is given true.
--  @param self the ratchet object.
--  @param noblock given as true, this function will not block waiting for events.
--  @return false if all threads have completed execution, true otherwise.
function loop_once(self, noblock)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
