
--- The socket library provides an implementation of the standard Berkeley
--  sockets on top of the ratchet library. Any methods that pause execution
--  MUST be called from within a thread attached to a ratchet object. This
--  library is also intended for use alongside calls to ratchet:resolve_dns(),
--  see the manual for examples. Most of these functions can fail, see error
--  handling section in manual for details.
module "ratchet.socket"

--- Returns a new socket object, with its own file descriptor.
--  @param family the protocol family which will be used for communication.
--  @param socktype specifies the communication semantics.
--  @param protocol specifies a particular protocol to be used.
--  @return a new socket object.
function new(family, socktype, protocol)

--- Returns a new socket object, using the given file descriptor. This is
--  particularly useful when sockets are returned by the accept() system call.
--  @param fd an existing file descriptor of a socket.
--  @return a new socket object.
function from_fd(fd)

--- URI parser for socket connection strings. On success, the returned object
--  contains all necessary data to create and bind/connect a new socket object.
--  The parser is capable of creating TCP, UDP, and Unix sockets. See the manual
--  page for complete details. Depending on the URI schema, this call *may*
--  block until data is ready, such as for DNS lookups.
--  @param uri the URI connection string.
--  @return Table of information useful in creating a new socket, or nil on
--          failure followed by an error. See the manual for details.
function prepare_uri(uri)

--- Prepares TCP socket information. On success, the returned object
--  contains all necessary data to create and bind/connect a new socket object.
--  See the manual page for complete details. If host is not an IP address, this
--  call will pause the current thread to wait for a DNS lookup.
--  @param host queried by DNS for new TCP connection.
--  @param port destination port number for new TCP connection.
--  @return Table of information useful in creating a new socket, or nil on
--          failure followed by an error. See the manual for details.
function prepare_tcp(host, port)

--- Prepares UDP socket information. On success, the returned object
--  contains all necessary data to create and bind/connect a new socket object.
--  See the manual page for complete details. If host is not an IP address, this
--  call will pause the current thread to wait for a DNS lookup.
--  @param host queried by DNS for new UDP connection.
--  @param port destination port number for new UDP connection.
--  @return Table of information useful in creating a new socket, or nil on
--          failure followed by an error. See the manual for details.
function prepare_udp(host, port)

--- Prepares UNIX socket information. On success, the returned object
--  contains all necessary data to create and bind/connect a new socket object.
--  See the manual page for complete details.
--  @param path file-path to connect/create UNIX socket.
--  @return Table of information useful in creating a new socket, or nil on
--          failure followed by an error. See the manual for details.
function prepare_unix(path)

--- Returns the internal socket file descriptor.
--  @param self the socket object.
--  @return a file descriptor.
function get_fd(self)

--- Converts a byte-string from network byte-order to host byte-order. This is
--  necessary only for binary socket protocols. Takes a 4-byte string from
--  the socket and returns the regular number after conversion. See manpage
--  byteorder(3).
--  @param in the binary input string from the socket to convert to a number.
--  @return the resulting number after conversion. Any extra arguments passed
--          are also returned in order.
function ntoh(in)

--- Converts a number into a byte-string ready to be sent over the network. This
--  is necessary only for binary socket protocols. See manpage byteorder(3).
--  @param in the number to be converted.
--  @return a byte-string in network byte-order ready to be sent over the
--          network. Any extra arguments passed are also returned in order.
function hton(in)

--- Converts a byte-string from network byte-order to host byte-order. This is
--  necessary only for binary socket protocols. Takes a 2-byte string from
--  the socket and returns the regular number after conversion. See manpage
--  byteorder(3). This is the 16-bit version of ntoh().
--  @param in the binary input string from the socket to convert to a number.
--  @return the resulting number after conversion. Any extra arguments passed
--          are also returned in order.
function ntoh16(in)

--- Converts a number into a byte-string ready to be sent over the network. This
--  is necessary only for binary socket protocols. See manpage byteorder(3).
--  @param in the number to be converted. This is the 16-bit version of hton().
--  @return a byte-string in network byte-order ready to be sent over the
--          network. Any extra arguments passed are also returned in order.
function hton16(in)

--- Gets the current timeout for all socket methods that pause the thread.
--  @param self the socket object.
--  @return the current timeout in seconds.
function get_timeout(self)

--- Sets the current timeout for all socket methods that pause the thread.
--  @param self the socket object.
--  @param seconds the new timeout in seconds.
function set_timeout(self, seconds)

--- Binds the socket to the given sockaddr, corresponding to the bind() system
--  call. This method must be used for sockets that call listen(), and may be
--  used for sockets that call connect() when it is desired to connect from
--  a specific network interface.
--  @param self the socket object.
--  @param sockaddr a sockaddr userdata object.
function bind(self, sockaddr)

--- Sets the socket to listen mode. This socket will open the system port it
--  was bind()ed to. Connections to this socket can be accepted by the accept()
--  method.
--  @param self the socket object.
--  @param backlog optional maximum length of pending connections queue.
function listen(self, backlog)

--- Pauses the current thread until a new connection to the socket is
--  attempted. The current socket MUST have called listen().
--  @param self the socket object.
--  @return a new socket object for the connection, followed by a string with
--          the IP address of the connecting host.
function accept(self)

--- Attempts a connection to the given sockaddr and pauses the thread until it
--  is completed.
--  @param self the socket object.
--  @param sockaddr a sockaddr userdata object.
--  @return true if the connection succeeded, false otherwise.
function connect(self, sockaddr)

--- Creates and attaches an encryption session to the socket, based on the
--  given context. Once this session is created, it handles all calls to the
--  send()/recv() methods.
--  @param self the socket object.
--  @param context a ratchet.ssl context object.
--  @return the new encryption session for the socket. See ratchet.ssl.session
--          for details.
function encrypt(self, context)

--- Returns the current encryption session for the socket.
--  @param self the socket object.
--  @return the encryption session, or nil if unencrypted.
function get_encryption(self)

--- Attempts to send the given data across the socket, pausing the thread until
--  it is able to do so.
--  @param self the socket object.
--  @param data a string of data to send.
function send(self, data)

--- Attempts to receive data from across the socket, pausing the thread until
--  data is available. As in the system call, recv() will return an empty
--  string if the other end has shut down.
--  @param self the socket object.
--  @return string of data received on the socket.
function recv(self)

--- Gets the current state of the socket. Returns true if the socket is
--  connected and not in an error state, or returns nil and an error otherwise.
--  @param self the socket object.
--  @return true if the socket is okay. See error handling section in manual.
function check_errors(self)

--- Shuts down portions of the socket, corresponding to the system call of the
--  same name. You can shut down reads, writes, or both.
--  @param self the socket object.
--  @param what either "read", "write", or "both". Default "both".
function shutdown(self, what)

--- Closes the socket internal file descriptor. This is called automatically
--  when the socket object is collected, for convenience.
--  @param self the socket object.
function close(self)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
