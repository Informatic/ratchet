
--- Provides functions to use BSD sockets in Lua, in a way that is compatible
--  with the ratchet library. This module is a class that instantiates a socket
--  object.
module "ratchet.socket"

--- Initializes a new socket object. All arguments are given in named format, 
--  meaning the first and only argument is a table with the argument names as
--  keys. If <code>fd</code> is provided, it is used as the new object's backend
--  file descriptor; the <code>socket</code> system call is never called.
--  Otherwise, <code>sockaddr</code> must be a userdata object with <code>struct
--  sockaddr</code> data for the socket. If you want the new socket object to
--  use UDP instead of TCP, specify a true value in the optional <code>use_udp
--  </code> argument.
--  @param named_args Table containing named arguments listed in the function
--      description.
function init (named_args)

--- Shuts down and closes the socket.
function close ()

--- Returns the file descriptor associated with the socket.
function getfd ()

--- Enabled by default, specifies that socket calls should block if data is not
--  readily available.
function set_blocking ()

--- Socket calls will not block if the action cannot be taken immediately. This
--  is useful when used in conjunction with an I/O poller (like
--  <a href="/?p=Pollers/EPoll">EPoll</a>) to watch multiple resources
--  synchronously.
function set_nonblocking ()

--- Puts the socket into listening mode on the <code>sockaddr</code> supplied at
--  initialization. For those familiar with the <code>bind</code> and <code>
--  listen</code> system calls, this method executes both.
--  @param backlog "defines the maximum length to which the queue of pending
--      connections ... may grow" (optional, default 30).
--      <a href="http://linux.die.net/man/2/listen">*</a>
function listen (backlog)

--- Initiates a connection to the endpoint given by <code>sockaddr</code> on
--  object initialization. This call may block, especially when a connection
--  goes across a network. If the connection fails, a Lua error is thrown with
--  the system error message.
function connect ()

--- Accepts a connection when the socket has been set to <code>listen()</code>.
--  This method returns a new socket object, created by providing the file
--  descriptor returned by the <code>accept</code> system call in the
--  constructor. This call may block while waiting for a remote client to
--  initiate a connection.
function accept ()

--- Sends <code>data</code> across the file descriptor. This call is safe to use
--  on binary data. Presently, this method uses the <code>write</code> system
--  call as no flags to the <code>send</code> system call were initially
--  necessary. This call may block if the socket is not ready to send data.
--  @param data The binary or text data to send across the socket.
function send (data)

--- Use the <code>writev</code> system call to send multiple chunks of
--  (binary-safe) data at once. The data may be received on the other end of the
--  connection as one chunk of data. As with <code>send()</code>, this call may
--  block if the socket is not ready to send data. This method is not
--  implemented on systems where <code>writev</code> is not available.
--  @param data_array Ordered (1..n) table array containing data to send.
function sendmany (data_array)

--- Receives a chunk of data from the connection. The return value is a string
--  containing the data received. An empty-string return value is a special
--  case: it can either mean the connection is closed or (if non-blocking) no
--  data is readily available. The returned data is binary-safe. This call may
--  block while waiting for data.
function recv ()

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
