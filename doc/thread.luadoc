
--- This module provides as set of functions for creating and controlling threads
--  from within the context of a running ratchet. These functions do not need to
--  be passed a ratchet object, they will deduce it from the current thread.
module "ratchet.thread"

--- Queues a new thread for execution. The thread calls func and gives it any extra
--  arguments as its parameters. The thread is not started by this method, instead
--  it is started on next iteration of the loop. All threads attached with
--  this method must be completed before loop() will finish.
--  @param func the function to run in the thread.
--  @param ... extra parameters to function.
--  @return a Lua thread object.
function attach(func, ...)

--- Queues a new thread for execution. The thread calls func and gives it any extra
--  arguments as its parameters. The thread is not started by this method, instead
--  it is started on next iteration of the loop. Threads attached with this method
--  as opposed to attach() will be destroyed when loop() finishes, whether
--  completed or not.
--  @param func the function to run in the thread.
--  @param ... extra parameters to function.
--  @return a Lua thread object.
function attach_background(func, ...)

--- Pauses the current thread until all threads listed in the given table have
--  completed their execution either normally or by error.
--  @param threads table containing threads to wait for.
function wait_all(threads)

--- Returns a table that is specific to the currently-running thread that can be
--  used as scratch-space for thread-scope data. This table is not created until
--  the first time this method is called for in thread.
--  @param premade optionally pass in a pre-existing object to be stored as the
--                 thread's scratch space instead of the default a new table.
--  @return a table specific to the current thread.
function space()

--- Returns the Lua thread object that is currently running, or nil for the main
--  thread.
--  @return thread object or nil.
function self()

--- Pauses the current thread for the given period.
--  @param seconds resume thread after this many seconds elapse.
function timer(seconds)

--- Pauses the current thread indefinitely. The thread must be resumed by a call
--  to unpause() from another thread.
--  @return any extra arguments passed to unpause() from other thread.
function pause()

--- Unpauses the given thread. The paused thread will resume on next iteration
--  of the main loop. Extra parameters to this function will be given to the
--  paused thread as return values from pause().
--  @param thread the thread to unpause.
--  @param ... extra parameters will be returned by pause().
function unpause(thread, ...)

--- Blocks on multiple items, with a single timeout. This function will block
--  until the first event on any one of the items. Items given in the read and
--  write argument tables must have a get_fd() method that returns its file
--  descriptor.
--  @param reads Table of items to wait for read events on.
--  @param writes Table of items to wait for write events on.
--  @param timeout Returns nil if this many seconds elapse with no events.
--  @return The item from the read or write table that triggered an event.
function block_on(reads, writes, timeout)

--- Blocks the current thread until the current process receives the given
--  signal.
--  @param signal A signal by number or name (see signal(7)).
function sigwait(signal)

--- Kills a given thread. If the thread is yielding on any events, those events
--  are cleaned up and the thread is dropped.
--  @param thread The thread to kill.
function kill(thread)

--- Kills all threads in the table sequence. Essentially this function is the
--  same as kill() but run in a loop over a table.
--  @param threads table array of threads to kill.
function kill_all(threads)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
