
--- Monitors a set of sockets for activity so that system calls that would
--  normally block can be called only when they are ready for immediate
--  execution. Epoll objects work like sockets in that they can be polled for
--  activity. That means on a read event the <code>wait()</code> method will
--  return immediately with events from its socket set.
module "ratchet.epoll"

--- Initializes a new epoll object. No sockets are initially connected to the
--  poller.
--  @param fd_est Number of sockets estimated to attach (optional, default 100).
function init (fd_est)

--- Returns the file descriptor of the epoll state.
--  @return The file descriptor returned by the <code>epoll_create</code>
--      system call.
function getfd ()

--- Registers a socket object: anything with a <code>getfd()</code> method that
--  returns an integer-based file descriptor. Events on the socket will now be
--  caught in the <code>wait()</code> method.
--  @param sockobj The socket object to register.
--  @param ... Optional list of flags to bitwise-OR together and pass in to the
--      <code>epoll_ctl</code> system call (optional, default EPOLLIN).
function register (sockobj, ...)

--- Modifies a registered socket object with new flags.
--  @param sockobj The registered socket object to modify.
--  @param ... Optional list of flags to bitwise-OR together and pass in to the
--      <code>epoll_ctl</code> system call (optional, default EPOLLIN).
function modify (sockobj, ...)

--- Modifies a registered socket object to specify that it has data to write.
--  Epoll can still trap other events on the socket, such as read and close;
--  events are not limited to writes after this call.
--  @param sockobj The registered socket object to modify.
function set_writable (sockobj)

--- Modifies a registered socket object to specify that it no longer has data
--  to write. Write events will no longer be received, but read and close and
--  other standard events will still occur after this call.
--  @param sockobj The registered socket object to modify.
function unset_writable (sockobj)

--- Unregisters a socket object from the epoll object. This socket will no
--  longer trigger events from the <code>wait()</code> method.
--  @param sockobj The registered socket object to unregister.
function unregister (sockobj)

--- Waits for events on the socket set. Events will only be generated for
--  sockets <code>register()</code>ed with the object and only for events for
--  which a flag was given. See <a href="/?p=Pollers/EPoll">manual</a> for
--  usage information.
--  @param timeout The maximum number of seconds to wait for events (optional,
--      default indefinite).
--  @param maxevents The maximum number of events to return per call (optional,
--      default 1).
--  @return <a href="http://www.lua.org/pil/7.3.html">Stateless iterator</a>
--      to loop over event data.
function wait (timeout, maxevents)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
